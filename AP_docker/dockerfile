## Base Image for building the environment within the docker
FROM nvidia/cuda:12.1.0-cudnn8-devel-ubuntu20.04

## Specify NVIDIA GPU management tool to utilize the GPUs available within the local machine
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility

## Ensures that the package lists are installed and updated without requiring manual intervention
RUN DEBIAN_FRONTEND=noninteractive apt update && DEBIAN_FRONTEND=noninteractive apt install -y --allow-change-held-packages \
    python3 \
    python3-pip \
    python3-tk \
    git \
    libgl1 \
    libglib2.0-0\
    libsm6 \
    libxrender1 \
    libxext6

## To install Python package lists using pip3
RUN pip3 install torch torchvision torchaudio cython pycocotools gdown ninja matplotlib \
    cython_bbox numpy scipy opencv-python pyyaml tensorboardx terminaltables tqdm visdom
RUN pip install pip --upgrade

## Sets the working directory to /home within the docker
WORKDIR /home

## Creates a new directory '/build' within the docker
RUN mkdir /build

## Installing and build COCO API for Halpe-FullBody dataset
ADD /HalpeCOCOAPI /build/HalpeCOCOAPI
RUN cd /build/HalpeCOCOAPI/PythonAPI && python3 setup.py build develop --user

## Setting the environment variable for applications and tools that rely on CUDA
ENV CUDA_HOME='/usr/local/cuda'
RUN TORCH_CUDA_ARCH_LIST="6.1;7.5;8.6" \
    PATH=/usr/local/cuda/bin/:$PATH \
    LD_LIBRARY_PATH=/usr/local/cuda/lib64/:$LD_LIBRARY_PATH

## Clone the AlphaPose official Github and build it
RUN cd /build && git clone https://github.com/MVIG-SJTU/AlphaPose.git
WORKDIR /build/AlphaPose

## Download the necessary detector and model for AlphaPose applications using Google Drive download
RUN mkdir -p detector/yolox/data && \
    gdown 1G_03v91ckIfi2Wwu_uuMMQ4nHBWoklwn -O detector/yolox/data/yolox_x.pth && \
    gdown 10QLwqRk334W86KrFuDFXpEw1kbrXHCSP -O pretrained_models/halpe26_fast_res50_256x192.pth